{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n}\nconst collectionRef = firestore.collection('collections'); // collectionRef\n// .get().then(snapshot => {\n//     const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n//     dispatch(fetchCollectionsSuccess(collectionsMap));\n//     }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/daminivaru/Desktop/2020 CODE/e-commerce-app/clean-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACtC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACF;AAED,MAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB,C,CAEA;AACA;AACA;AACA;AACA;;AAIA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMX,SAAS,CACXK,eAAe,CAACO,uBADL,EAEXN,qBAFW,CAAf;AAGH","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'\n\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions'\n\nimport ShopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync() {\n   yield console.log('I am fired');\n}\n\nconst collectionRef = firestore.collection('collections');\n\n// collectionRef\n// .get().then(snapshot => {\n//     const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n//     dispatch(fetchCollectionsSuccess(collectionsMap));\n//     }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n\n\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync)\n}"]},"metadata":{},"sourceType":"module"}